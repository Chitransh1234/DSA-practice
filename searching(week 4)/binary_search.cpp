#include <iostream>
#include <vector>

using namespace std;

int binary_search(int arr[],int n, int target){
    int start=0, end=n-1;
    //some flow in below line????
    // the flow is that the integer value can be overflowed due to bigger value can be generated by adding start and end.
    // to correct this , mid can be:
    //mid=start+(end-start)/2;
    //Or
    //mid=s/2+e/2;
    int mid=(start+end)/2;
    while(start<=end){
        if(arr[mid]==target){
            return mid;

        }
        if(arr[mid]>target){
            end=mid-1;
        }
        if(arr[mid]<target){
            start=mid+1;
        }
        //yahan pr mai galti karunga
        mid=(start+end)/2;
    }
    return -1;
}
int first_occurence(int arr[],int n,int target){
    int s=0, e=n-1;
    int mid=(s+e)/2;
    int ans=-1;
    while(s<=e){
        if(arr[mid]==target){
            ans=mid;
            e=mid-1;
        }
        if(arr[mid]>target){
            e=mid-1;
        }
        if(arr[mid]<target){
            s=mid+1;
        }
        //yahan pr mai galti karunga
        mid=(s+e)/2;
    }
    return ans;
}
int last_occurence(int arr[],int n,int target){
    int s=0, e=n-1;
    int mid=(s+e)/2;
    int ans=-1;
    while(s<=e){
        if(arr[mid]==target){
            ans=mid;
            s=mid+1;
        }
        if(arr[mid]>target){
            e=mid-1;
        }
        if(arr[mid]<target){
            s=mid+1;
        }
        //yahan pr mai galti karunga
        mid=(s+e)/2;
    }
    return ans;
}
int total_occurence(int arr[],int n, int target){
    int first_Occ=first_occurence(arr,n,target);
    int last_Occ=last_occurence(arr,n,target);
    int total=last_Occ-first_Occ+1;
    return total;
    
}
int main(){
    int arr[]={10,20,30,30,30,30,70,80,90};
    int target =30;
    int n=9;
    int ans_index=last_occurence(arr,n,target);
    if(ans_index==-1){
        cout<<"not found";
    }
    else{  
        cout<<"element found at index:"<<ans_index<<endl;
    }
}